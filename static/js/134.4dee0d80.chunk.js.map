{"version":3,"file":"static/js/134.4dee0d80.chunk.js","mappings":"+MAkEA,UA7De,WACb,OAAkCA,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAgBF,EAAaG,IAAI,SACjCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACc,OAAlBJ,IAIJK,EAAAA,EAAAA,IAAsBL,GAAeM,MAAK,SAAAC,GAAC,OAAIX,EAAaW,EAAjB,GAC5C,GAAE,CAACP,IAEJ,IAUMQ,EAAa,SAAAC,GACjB,OAAoB,OAAhBA,EACK,yBAEH,kCAAN,OAAyCA,EAC1C,EAED,OACE,4BACE,SAAC,KAAD,WACE,kBAAMC,SApBU,SAAAH,GACpBA,EAAEI,iBAEF,IAAQC,EAAUL,EAAEM,cAAcC,SAASC,MAAnCH,MAERb,EAAgB,CAAEgB,MAAOH,IAEzBL,EAAEM,cAAcG,OACjB,EAYK,WACE,kBAAOC,KAAK,OAAOC,YAAY,mBAAmBC,KAAK,WACvD,mBAAQF,KAAK,SAAb,0BAGJ,UAAC,KAAD,WACiB,OAAdtB,GACCA,EAAUyB,KAAI,gBAAGC,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,YAAaa,EAApB,EAAoBA,MAApB,OACZ,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaF,GAAMG,MAAOtB,EAArC,UACE,4BACE,gBACEuB,IAAG,UAAKjB,EAAWC,IACnBiB,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAET,uBAAIN,UATDD,EADG,IAcV,SAIb,C,+LC5DDQ,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJiB,oCAOnB,IAAMC,EAAiB,mCAAG,oGACDF,EAAAA,EAAAA,IAAU,wBADT,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMb,GAAN,uFACIQ,EAAAA,EAAAA,IAAA,iBAAoBR,IADxB,cACbW,EADa,yBAGZA,EAASC,MAHG,2CAAH,sDAMZE,EAAmB,mCAAG,WAAMd,GAAN,uFACHQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,aADG,cACpBW,EADoB,yBAGnBA,EAASC,KAAKG,MAHK,2CAAH,sDAMnBC,EAAmB,mCAAG,WAAMhB,GAAN,uFACHQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,aADG,cACpBW,EADoB,yBAEnBA,EAASC,KAAKK,SAFK,2CAAH,sDAKnBjC,EAAqB,mCAAG,WAAMkC,GAAN,uFACLV,EAAAA,EAAAA,IAAU,gBAAiB,CAChDW,OAAQ,CACND,MAAOA,KAHiB,cACtBP,EADsB,OAM5BS,QAAQC,IAAIV,EAASC,KAAKK,SANE,kBAOrBN,EAASC,KAAKK,SAPO,2CAAH,qD","sources":["pages/Movies.jsx","utils/MoviesAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovieByQuerySearch } from 'utils/MoviesAPI';\nimport { SearchForm, MoviesGrid } from 'components/AppStyled';\n\nconst Movies = () => {\n  const [movieList, setMovieList] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieToSearch = searchParams.get('movie');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (movieToSearch === null) {\n      return;\n    }\n\n    getMovieByQuerySearch(movieToSearch).then(e => setMovieList(e));\n  }, [movieToSearch]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const { value } = e.currentTarget.elements.movie;\n\n    setSearchParams({ movie: value });\n\n    e.currentTarget.reset();\n  };\n\n  const viewPoster = poster_path => {\n    if (poster_path === null) {\n      return '../images/no_cover.png';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n\n  return (\n    <div>\n      <SearchForm>\n        <form onSubmit={submitHandler}>\n          <input type=\"text\" placeholder=\"input movie name\" name=\"movie\" />\n          <button type=\"submit\">Search</button>\n        </form>\n      </SearchForm>\n      <MoviesGrid>\n        {movieList !== null &&\n          movieList.map(({ id, poster_path, title }) => (\n            <li key={id}>\n              <NavLink to={`/movies/${id}`} state={location}>\n                <div>\n                  <img\n                    src={`${viewPoster(poster_path)}`}\n                    alt={title}\n                    width=\"300\"\n                    height=\"450\"\n                  />\n                  <p>{title}</p>\n                </div>\n              </NavLink>\n            </li>\n          ))}{' '}\n      </MoviesGrid>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst AUTH_TOKEN = '3cfddd5e97fd8d1a3fdf959358de6593';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: AUTH_TOKEN,\n};\n\nconst getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/week');\n  return response.data;\n};\n\nconst getMovieByID = async id => {\n  const response = await axios.get(`/movie/${id}`);\n\n  return response.data;\n};\n\nconst getMovieCreditsByID = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n\n  return response.data.cast;\n};\n\nconst getMovieReviewsByID = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nconst getMovieByQuerySearch = async query => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n    },\n  });\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByID,\n  getMovieCreditsByID,\n  getMovieReviewsByID,\n  getMovieByQuerySearch,\n};\n"],"names":["useState","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","movieToSearch","get","location","useLocation","useEffect","getMovieByQuerySearch","then","e","viewPoster","poster_path","onSubmit","preventDefault","value","currentTarget","elements","movie","reset","type","placeholder","name","map","id","title","to","state","src","alt","width","height","axios","api_key","getTrendingMovies","response","data","getMovieByID","getMovieCreditsByID","cast","getMovieReviewsByID","results","query","params","console","log"],"sourceRoot":""}
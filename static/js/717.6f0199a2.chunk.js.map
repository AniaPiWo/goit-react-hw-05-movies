{"version":3,"file":"static/js/717.6f0199a2.chunk.js","mappings":"0OAEMA,EAAcC,EAAAA,GAAAA,IAAH,uIASXC,EAAeD,EAAAA,GAAAA,IAAH,2KAUZE,EAAgBF,EAAAA,GAAAA,IAAH,oG,SClBNG,EAAS,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC/CC,EAAW,IAAIC,KAAKJ,GAAUK,qBACpC,OACE,UAACZ,EAAD,YACE,UAACE,EAAD,YACE,4BAAOG,EAAP,YACA,cAAGQ,KAAML,EAAT,SAAgBC,KAChB,uBAAIC,QAEN,SAACP,EAAD,WACE,uBAAIG,QAIX,E,SCoBD,EAhCgB,WACd,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAG,OAAIN,EAAWM,EAAf,GACtC,GAAE,CAACL,KAGF,yBACGF,EAAQQ,OAAS,EAChBR,EAAQS,KACN,gBAAGnB,EAAH,EAAGA,OAAQoB,EAAX,EAAWA,QAASC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,IAAKC,EAArC,EAAqCA,GAAIC,EAAzC,EAAyCA,eAAzC,OACE,SAACzB,EAAD,CAEEK,SAAUoB,EAAeC,SACzBzB,OAAQA,EACRC,KAAMmB,EACNlB,SAAUmB,EACVlB,KAAMmB,GALDC,EAFT,KAYF,cAAGG,MAAO,CAAEC,WAAY,SAAUC,UAAW,UAA7C,+CAMP,C,+LC/BDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJiB,oCAOnB,IAAMC,EAAiB,mCAAG,oGACDF,EAAAA,EAAAA,IAAU,wBADT,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMX,GAAN,uFACIM,EAAAA,EAAAA,IAAA,iBAAoBN,IADxB,cACbS,EADa,yBAGZA,EAASC,MAHG,2CAAH,sDAMZE,EAAmB,mCAAG,WAAMZ,GAAN,uFACHM,EAAAA,EAAAA,IAAA,iBAAoBN,EAApB,aADG,cACpBS,EADoB,yBAGnBA,EAASC,KAAKG,MAHK,2CAAH,sDAMnBrB,EAAmB,mCAAG,WAAMQ,GAAN,uFACHM,EAAAA,EAAAA,IAAA,iBAAoBN,EAApB,aADG,cACpBS,EADoB,yBAEnBA,EAASC,KAAKI,SAFK,2CAAH,sDAKnBC,EAAqB,mCAAG,WAAMC,GAAN,uFACLV,EAAAA,EAAAA,IAAU,gBAAiB,CAChDW,OAAQ,CACND,MAAOA,KAHiB,cACtBP,EADsB,OAM5BS,QAAQC,IAAIV,EAASC,KAAKI,SANE,kBAOrBL,EAASC,KAAKI,SAPO,2CAAH,qD","sources":["components/Reviews/ReviewStyled.jsx","components/Reviews/Review.jsx","components/Reviews/Reviews.jsx","utils/MoviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst ReviewStyle = styled.div`\n  display: flex;\n  margin-top: 40px;\n  gap: 30px;\n  color: white;\n  font-family: 'Roboto', sans-serif;\n}\n`;\n\nconst ReviewAuthor = styled.div`\n  display: flex;\n  min-width: 200px;\n  padding-left: 20px;\n  flex-direction: column;\n  color: white;\n  font-family: 'Roboto', sans-serif;\n}\n`;\n\nconst ReviewContent = styled.div`\n  display: flex;\n  color: white;\n  font-family: 'Roboto', sans-serif;\n}\n`;\n\nexport { ReviewStyle, ReviewAuthor, ReviewContent };\n","import PropTypes from 'prop-types';\nimport { ReviewStyle, ReviewAuthor, ReviewContent } from './ReviewStyled';\n\nexport const Review = ({ author, text, postTime, link, nickname }) => {\n  const datePost = new Date(postTime).toLocaleDateString();\n  return (\n    <ReviewStyle>\n      <ReviewAuthor>\n        <span>{author} aka </span>\n        <a href={link}>{nickname}</a>\n        <p>{datePost}</p>\n      </ReviewAuthor>\n      <ReviewContent>\n        <p>{text}</p>\n      </ReviewContent>\n    </ReviewStyle>\n  );\n};\n\nReview.propTypes = {\n  author: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  nickname: PropTypes.string,\n  postTime: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Review } from './Review';\nimport { getMovieReviewsByID } from 'utils/MoviesAPI';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviewsByID(movieId).then(rev => setReviews(rev));\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        reviews.map(\n          ({ author, content, updated_at, url, id, author_details }) => (\n            <Review\n              key={id}\n              nickname={author_details.username}\n              author={author}\n              text={content}\n              postTime={updated_at}\n              link={url}\n            />\n          )\n        )\n      ) : (\n        <p style={{ fontFamily: 'Roboto', textAlign: 'center' }}>\n          There is no reviews on this film\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst AUTH_TOKEN = '3cfddd5e97fd8d1a3fdf959358de6593';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: AUTH_TOKEN,\n};\n\nconst getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/week');\n  return response.data;\n};\n\nconst getMovieByID = async id => {\n  const response = await axios.get(`/movie/${id}`);\n\n  return response.data;\n};\n\nconst getMovieCreditsByID = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n\n  return response.data.cast;\n};\n\nconst getMovieReviewsByID = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nconst getMovieByQuerySearch = async query => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n    },\n  });\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByID,\n  getMovieCreditsByID,\n  getMovieReviewsByID,\n  getMovieByQuerySearch,\n};\n"],"names":["ReviewStyle","styled","ReviewAuthor","ReviewContent","Review","author","text","postTime","link","nickname","datePost","Date","toLocaleDateString","href","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviewsByID","then","rev","length","map","content","updated_at","url","id","author_details","username","style","fontFamily","textAlign","axios","api_key","getTrendingMovies","response","data","getMovieByID","getMovieCreditsByID","cast","results","getMovieByQuerySearch","query","params","console","log"],"sourceRoot":""}